/*
	Raw TCP packets
	Silver Moon (m00n.silv3r@gmail.com)
*/
#include<stdio.h>	//for printf
#include<string.h> //memset
#include<sys/socket.h>	//for socket ofcourse
#include<stdlib.h> //for exit(0);
#include<errno.h> //For errno - the error number
#include<netinet/tcp.h>	//Provides declarations for tcp header
#include<netinet/ip.h>	//Provides declarations for ip header

/*
	96 bit (12 bytes) pseudo header needed for tcp header checksum calculation
*/
struct pseudo_header
{
    u_int32_t source_address;
    u_int32_t dest_address;
    u_int8_t placeholder;
    u_int8_t protocol;
    u_int16_t tcp_length;
};

/*
	Generic checksum calculation function
*/
unsigned short csum(unsigned short *ptr,int nbytes)
{
    register long sum;
    unsigned short oddbyte;
    register short answer;

    sum=0;
    while(nbytes>1) {
        sum+=*ptr++;
        nbytes-=2;
    }
    if(nbytes==1) {
        oddbyte=0;
        *((u_char*)&oddbyte)=*(u_char*)ptr;
        sum+=oddbyte;
    }

    sum = (sum>>16)+(sum & 0xffff);
    sum = sum + (sum>>16);
    answer=(short)~sum;

    return(answer);
}

int main (void)
{
    //Create a raw socket
    int s = socket (PF_INET, SOCK_RAW, IPPROTO_TCP);

    if(s == -1)
    {
        //socket creation failed, may be because of non-root privileges
        perror("Failed to create socket");
        exit(1);
    }

    //Datagram to represent the packet
    char datagram[4096] , source_ip[32] , *data , *pseudogram;

    //zero out the packet buffer
    memset (datagram, 0, 4096);

    //IP header
    struct iphdr *iph = (struct iphdr *) datagram;

    //TCP header
    struct tcphdr *tcph = (struct tcphdr *) (datagram + sizeof (struct ip));
    struct sockaddr_in sin;
    struct pseudo_header psh;

    //Data part
    data = datagram + sizeof(struct iphdr) + sizeof(struct tcphdr);
    strcpy(data , "ABCDEFGHIJKLMNOPQRSTUVWXYZ");

    //some address resolution
    strcpy(source_ip , "192.168.1.2");
    sin.sin_family = AF_INET;
    sin.sin_port = htons(80);
    sin.sin_addr.s_addr = inet_addr ("1.2.3.4");

    //Fill in the IP Header
    iph->ihl = 5;
    iph->version = 4;
    iph->tos = 0;
    iph->tot_len = sizeof (struct iphdr) + sizeof (struct tcphdr) + strlen(data);
    iph->id = htonl (54321);	//Id of this packet
    iph->frag_off = 0;
    iph->ttl = 255;
    iph->protocol = IPPROTO_TCP;
    iph->check = 0;		//Set to 0 before calculating checksum
    iph->saddr = inet_addr ( source_ip );	//Spoof the source ip address
    iph->daddr = sin.sin_addr.s_addr;

    //Ip checksum
    iph->check = csum ((unsigned short *) datagram, iph->tot_len);

    //TCP Header
    tcph->source = htons (1234);
    tcph->dest = htons (80);
    tcph->seq = 0;
    tcph->ack_seq = 0;
    tcph->doff = 5;	//tcp header size
    tcph->fin=0;
    tcph->syn=1;
    tcph->rst=0;
    tcph->psh=0;
    tcph->ack=0;
    tcph->urg=0;
    tcph->window = htons (5840);	/* maximum allowed window size */
    tcph->check = 0;	//leave checksum 0 now, filled later by pseudo header
    tcph->urg_ptr = 0;

    //Now the TCP checksum
    psh.source_address = inet_addr( source_ip );
    psh.dest_address = sin.sin_addr.s_addr;
    psh.placeholder = 0;
    psh.protocol = IPPROTO_TCP;
    psh.tcp_length = htons(sizeof(struct tcphdr) + strlen(data) );

    int psize = sizeof(struct pseudo_header) + sizeof(struct tcphdr) + strlen(data);
    pseudogram = malloc(psize);

    memcpy(pseudogram , (char*) &psh , sizeof (struct pseudo_header));
    memcpy(pseudogram + sizeof(struct pseudo_header) , tcph , sizeof(struct tcphdr) + strlen(data));

    tcph->check = csum( (unsigned short*) pseudogram , psize);

    //IP_HDRINCL to tell the kernel that headers are included in the packet
    int one = 1;
    const int *val = &one;

    if (setsockopt (s, IPPROTO_IP, IP_HDRINCL, val, sizeof (one)) < 0)
    {
        perror("Error setting IP_HDRINCL");
        exit(0);
    }

    //loop if you want to flood :)
    while (1)
    {
        //Send the packet
        if (sendto (s, datagram, iph->tot_len ,	0, (struct sockaddr *) &sin, sizeof (sin)) < 0)
        {
            perror("sendto failed");
        }
            //Data send successfully
        else
        {
            printf ("Packet Send. Length : %d \n" , iph->tot_len);
        }
    }

    return 0;
}

//Complete

u_char	ip_tos;			/* type of service */
short	ip_len;			/* total length */
u_short	ip_id;			/* identification */
short	ip_off;			/* fragment offset field */
#define	IP_DF 0x4000			/* dont fragment flag */
#define	IP_MF 0x2000			/* more fragments flag */
u_char	ip_ttl;			/* time to live */
u_char	ip_p;			/* protocol */
u_short	ip_sum;			/* checksum */
struct	in_addr ip_src,ip_dst;	/* source and dest address */






///////////////////////////////////////////////////////

//socket creating
int TCP_socket = socket(PF_INET, SOCK_RAW, IPPROTO_TCP);
if(TCP_socket == -1)
{
printf("Socket nope");
exit(91);
}


char packet[sizeof(struct ip)+sizeof(struct tcphdr)];
memset(packet, 0, 40);

struct ip* ip_header = (struct ip*)packet;
struct tcphdr *tcp_header = (struct tcphdr *) (packet + sizeof (struct ip));
struct sockaddr_in sin;
struct pseudo_header pseudo;

//ip header here
ip_header->ip_v = 4;
ip_header->ip_hl = 5;
ip_header->ip_tos = 0;
ip_header->ip_len = sizeof(ip_header)+sizeof(tcp_header);//celkova velikost paketu
ip_header->ip_id = htonl(1235);
ip_header->ip_off = 0;
ip_header->ip_ttl = 255;
ip_header->ip_p = IPPROTO_TCP;

ip_header->ip_sum = 0; //TODO checksum

//set ip addresses
struct in_addr ip_src = source_ip->sin_addr;
struct in_addr ip_dst;
char* temp_ptr = &(ip_dst.s_addr);
*temp_ptr = real_ip_addr[0];
*(temp_ptr+ sizeof(char)) = real_ip_addr[1];
*(temp_ptr+ sizeof(char)*2) = real_ip_addr[2];
*(temp_ptr+ sizeof(char)*3) = real_ip_addr[3];

for(int i = 0; i < 4; i++)
printf("%d ", real_ip_addr[i]);
printf("LLL %hhu, %d", ip_dst, (in_addr_t)*real_ip_addr);
char str[INET_ADDRSTRLEN];
inet_ntop(AF_INET, &(ip_dst), str, INET_ADDRSTRLEN);
printf("source: %s", str);

ip_header->ip_src = ip_src; //nastaveno na lokalni wifi = oK
ip_header->ip_dst = ip_dst;



//todo zjistit co co znamená
//TCP header here
//porty, odkud kam
tcp_header->source = htons (1234);
tcp_header->dest = htons (80); //NOTE TOHLE BUDU MENIT V CYKLU


tcp_header->seq = 0;
tcp_header->ack_seq = 0;
tcp_header->doff = 5;	//tcp header size

//nastaveni "flagu"
tcp_header->fin=0;
tcp_header->syn=1;
tcp_header->rst=0;
tcp_header->psh=0;
tcp_header->ack=0;
tcp_header->urg=0;
tcp_header->urg_ptr = 0;

//??
tcp_header->window = htons (5840);	/* maximum allowed window size */

tcp_header->check = 0;	//leave checksum 0 now, filled later by pseudo header
//TODO: Mám hlavičky v datagramu, checksum nefunguje ani u jedné. Teď potřebuju nastavit socket a poslat paket a
// wiresharkem sledovat, jak to dopadne a jak se to odešle. pokud to bude OK, tak bude stačit opravit checksum



sin.sin_family = AF_INET;
sin.sin_port = htons(80);
sin.sin_addr = ip_header->ip_dst;

int i = 0;
while (i < 15)
{

if (sendto(TCP_socket, packet, ip_header->ip_len ,0, (struct sockaddr *) &sin, sizeof (sin)) < 0)
{
perror("sendto failed");
}
//Data send successfully
else
{
printf ("Packet Send. Length : %d \n" , ip_header->ip_len);
}
i++;
}

//TODO: UDP



return 0;

